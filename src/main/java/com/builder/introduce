构建器（Builder）模式使用简单对象并使用逐步方法构建复杂对象。 这种类型的设计模式属于创建模式，因为此模式提供了创建对象的最佳方法之一。
构建器（Builder）模式构建器逐步构建最终对象，此构建器独立于其他对象。

实例
我们考虑了一家快餐店的商业案例，其中典型的餐点可能是汉堡和冷饮。 汉堡可以是一个素食汉堡或鸡肉汉堡，将被包装进行包装。 冷饮可以是一个可乐或百事将装放在一个瓶子中。

我们将创建一个Item接口，表示食品项目，如汉堡包和冷饮料以及实现Item接口的具体类。还有一个包装接口，表示食品包装和实现包装接口的具体类，因为汉堡包装在包装和冷饮将包装成瓶子。

然后创建一个具有ItemListList和MealBuilder的Meal类，通过组合Item来构建不同类型的Meal对象。 BuilderPatternDemo这是一个演示类将使用MealBuilder构建一个食品套餐。

第1步
创建两个接口分别代表食品和包装的项目（Item 和 Packing），如下所示 -
	Item.java
	Packing.java
	
第2步
创建实现Packing接口的具体类。如下代码所示 -
	Wrapper.java
	Bottle.java
	
第3步
创建抽象类实现Item接口提供默认功能。
	Burger.java
	ColdDrink.java

第4步
创建扩展汉堡(Burger)和冷饮(ColdDrink )类的具体类
	VegBurger.java
	ChickenBurger.java
	Coke.java
	Pepsi.java
	
第5步
创建一个具有上面定义的Item对象的Meal类。
	Meal.java
	
第6步
创建一个MealBuilder类，这是一个实际的构建类负责创建Meal对象。
	MealBuilder.java
	
第7步
BuiderPatternDemo类使用MealBuider对象来演示构建器模式。
	BuilderPatternDemo.java